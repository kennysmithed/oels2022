/*
This is the standard word_learning experiment, but shuffling the observation and test 
trials so that the same object is never seen on consecutive trials, using 
jsPsych.randomization.shuffleNoRepeats
*/

/******************************************************************************/
/*** Initialise jspsych *******************************************************/
/******************************************************************************/

/*
As per the main code.
*/

var jsPsych = initJsPsych({
  on_finish: function () {
    var all_data = jsPsych.data.get(); //get all data
    var all_data_as_csv = all_data.csv(); //convert to csv format
    save_data("wordlearning_data.csv", all_data_as_csv); //save it
    jsPsych.data.displayData("csv"); //and also dump the data to screen
  },
});

function save_data(name, data_in) {
  var url = "save_data.php";
  var data_to_send = { filename: name, filedata: data_in };
  fetch(url, {
    method: "POST",
    body: JSON.stringify(data_to_send),
    headers: new Headers({
      "Content-Type": "application/json",
    }),
  });
}

/******************************************************************************/
/*** Observation trials ************************************************/
/******************************************************************************/

/*
As per the main code.
*/

function make_observation_trial(object, label) {
  var object_filename = "images/" + object + ".jpg"; //build file name for the object
  trial = {
    type: jsPsychImageButtonResponse,
    stimulus: object_filename,
    choices: [],
    timeline: [
      {
        prompt: "&nbsp;", //dummy text
        trial_duration: 1000,
      },
      { prompt: label, trial_duration: 2000, data: { block: "observation" } },
    ],
  };
  return trial;
}

/*
Note that we need several objects in order to shuffle such that you never see the same object twice!
*/
var observation_trial_object4_buv = make_observation_trial("object4", "buv");
var observation_trial_object4_cal = make_observation_trial("object4", "cal");

var observation_trial_object5_seb = make_observation_trial("object5", "seb");
var observation_trial_object5_nuk = make_observation_trial("object5", "nuk");

//zero variation for this one, just for fun
var observation_trial_object6_dap = make_observation_trial("object6", "dap");

//stick them all together and generate the repeats in a single step
var observation_trials = jsPsych.randomization.repeat(
  [
    observation_trial_object4_buv,
    observation_trial_object4_cal,
    observation_trial_object5_seb,
    observation_trial_object5_nuk,
    observation_trial_object6_dap,
  ],
  [3, 2, 4, 1, 5]
);

/*
OK, so this is the critical point - shuffle so we never see the same object twice. The object is given by the 
stimulus parameter, so our equality test can be whether the two trials have the same stimulus or not.
*/
var observation_trials_norepeats = jsPsych.randomization.shuffleNoRepeats(
  observation_trials,
  function (trial1, trial2) {
    return trial1.stimulus == trial2.stimulus;
  }
);

//have a look before and after shuffling!
console.log(observation_trials);
console.log(observation_trials_norepeats);

/******************************************************************************/
/*** Production trials ************************************************/
/******************************************************************************/

/*
As per the main code.
*/

function make_production_trial(object, label_choices) {
  var object_filename = "images/" + object + ".jpg";
  var trial = {
    type: jsPsychImageButtonResponse,
    stimulus: object_filename,
    timeline: [
      //subtrial 1: show the two labelled buttons and have the participant select
      {
        choices: label_choices, //these will be shuffled on_start
        //at the start of the trial, randomise the left-right order of the labels
        //and note that randomisation in data as label_choices
        on_start: function (trial) {
          var shuffled_label_choices =
            jsPsych.randomization.shuffle(label_choices);
          trial.choices = shuffled_label_choices;
          trial.data = {
            block: "production",
            label_choices: shuffled_label_choices,
          };
        },
        //at the end of the trial, use data.response to figure out
        //which label they selected, and add that to data
        on_finish: function (data) {
          var button_number = data.response;
          data.label_selected = data.label_choices[button_number];
        },
      },
      //subtrial 2: show the image plus selected label, make the participant click that label
      //(to re-center their mouse)
      {
        choices: [], //dummy choices to be over-written on_start
        on_start: function (trial) {
          //get the last trial response (the data generated by the button-click)
          var last_trial_data = jsPsych.data.get().last(1).values()[0];
          //look up the label_selected on that last trial
          var last_trial_label = last_trial_data.label_selected;
          trial.choices = [last_trial_label]; //this is your only choice
        },
      },
    ],
  };
  return trial;
}

/*
Again, we need several objects to make this work.
*/
var production_trial_object4 = make_production_trial('object4',['buv','cal']);
var production_trial_object5 = make_production_trial('object5',['seb','nuk']);
var production_trial_object6 = make_production_trial('object6',['dap','mig']);


//This may include repeats
var production_trials = jsPsych.randomization.repeat([production_trial_object4,
                                                              production_trial_object5,
                                                              production_trial_object6], 5);

//Shuffle to avoid them, as before
var production_trials_norepeats = jsPsych.randomization.shuffleNoRepeats(production_trials,
                                                                function(trial1,trial2) {
                                                                  return trial1.stimulus==trial2.stimulus
                                                                });

//have a look before and after shuffling!
console.log(production_trials);
console.log(production_trials_norepeats);

/******************************************************************************/
/*** Instruction trials *******************************************************/
/******************************************************************************/

/*
As usual.
*/

var consent_screen = {
  type: jsPsychHtmlButtonResponse,
  stimulus:
    "<h3>Welcome to the experiment</h3> \
  <p style='text-align:left'>Experiments begin with an information sheet that explains to the participant \
  what they will be doing, how their data will be used, and how they will be \
  remunerated.</p> \
  <p style='text-align:left'>This is a placeholder for that information, which is normally reviewed \
  as part of the ethical review process.</p>",
  choices: ["Yes, I consent to participate"],
};

var instruction_screen_observation = {
  type: jsPsychHtmlButtonResponse,
  stimulus:
    "<h3>Observation Instructions</h3>\
  <p>You will observe one object being named several times. \
  Just sit back and watch.</p>",
  choices: ["Continue"],
};

var instruction_screen_production = {
  type: jsPsychHtmlButtonResponse,
  stimulus:
    "<h3>Production Instructions</h3>\
  <p>Next, you will be shown the same object again. \
  Please name this object like you saw in the observation stage. \
  This will repeat several times.</p>",
  choices: ["Continue"],
};

var final_screen = {
  type: jsPsychHtmlButtonResponse,
  stimulus:
    "<h3>Finished!</h3>\
  <p style='text-align:left'>Experiments often end with a final screen, e.g. that contains a completion\
  code so the participant can claim their payment.</p>\
  <p style='text-align:left'>Click Continue to finish the experiment and see your raw data. Your data will \
  also be saved to server_data.</p>",
  choices: ["Continue"],
};

/******************************************************************************/
/*** Build the timeline *******************************************************/
/******************************************************************************/

/*
As per the main code
*/
var full_timeline = [].concat(
  consent_screen,
  instruction_screen_observation,
  observation_trials_norepeats,
  instruction_screen_production,
  production_trials_norepeats,
  final_screen
);

/******************************************************************************/
/*** Run the timeline *******************************************************/
/******************************************************************************/

/*
Finally we call jsPsych.run to run the timeline we have created.
*/
jsPsych.run(full_timeline);
